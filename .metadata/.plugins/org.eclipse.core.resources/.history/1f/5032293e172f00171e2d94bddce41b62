/**
* Name: go2grid
* Author: Eoxys-Win10
* Description: 
* Tags: Tag1, Tag2, TagN
*/

model go2grid

global {
	int save_at <- 100000;
	int a <- 0;
	int b <- 0;
	int c <- 0;
	int d<- 0;
	int nb_cols <- 50;
	int nb_rows <- 50;
	int cycl <- cycle;
	bool target_flag;
	list target_point <- [{3,4,0},{10,40,0},{45,45,0},{45,5,0}];//,{100,600,0},{850,550,0}]; 
	int i <- 0;
	
	init {    
		
		
		create goal number: length(target_point){
			point loc <- (target_point at i)*2 + 1;
			location <- (loc).location;
			//write i;
			//write loc;
			i<-i+1;
		}
		create people number: 1 {
			target <- (goal) at 2;
			location <-  (one_of (cell)).location;
		}
		
		
	}
	reflex save_trajectories when: cycle = save_at
	{
		//adults case
		ask people
		{
			//loop t over: trajectories {
			//	create trajectory with: [shape::t, agent_name::name];
			//}
		}
		save trajectory  to:"../includes/trajectory.csv" type:"csv" with: [agent_name::"agent"];
		//ask trajectory {do die;}
	
	
	}
	
	reflex save_frequesncy when: cycle = save_at{
		save [a,b,c,d] to: "../includes/freq.csv" type:"csv";
	} 
	
	reflex save_bug_attribute when: cycle = save_at{
		//ask cell {
			// save the values of the variables name, speed and size to the csv file
			save cell to:"../includes/grids.asc" type:"asc";
		//}
		//Pause the model as the data are saved
		write cell;
		do pause;
		
	}
	
	
	
}

grid cell width: nb_cols height: nb_rows neighbors: 4 {
	//bool is_obstacle <- flip(0.001);
	//rgb color <- rgb(255,floor((count)/255),150);//is_obstacle ? #black : #white;
	int count <- 0 update: count;
	//write count;
} 

species trajectory {
	string agent_name;
}	 
species goal {
	
	aspect default { 
		draw circle(0.5) color: #red;
	}
}  
	
	  
species people skills: [moving] {
	bool target_flag <- false;
	goal target ;//<- one_of (goal);
	float speed <- float(2.0);
	list<list> trajectories;
	
	aspect default {
		draw circle(0.5) color: #green;
	}
	reflex update_count when: target_flag = false{
		cell(location).grid_value <- cell(location).grid_value + 1;
		//write "count = " +cell(location).grid_value;
	}
	reflex change_goal when: target_flag{
		
		if (target.location distance_to (goal at 0)) < 2{
			a<- a+1;
			write "a = "+a;
		int var0 <- rnd_choice([0,0.6,0.2,0.2]);
		target <-  (goal) at var0;
		target_flag <- false;
		
		}
		
		else if (target.location distance_to (goal at 1)) < 2{
			b <- b+1;
			write "b = "+b;
		int var0 <- rnd_choice([0.4,0,0.3,0.3]);
		target <-  (goal) at var0;
		target_flag <- false;
		
		}
		else if (target.location distance_to (goal at 2)) < 2{ //if target.location = goal at 3{
		c <- c+1;
		write "c = "+c;
		
		int var0 <- rnd_choice([0.5,0.5,0.25,0.2]);
		target <-  (goal) at var0;
		target_flag <- false;
		
		}
		else{
			d <- d+1;
		write "c = "+d;
		
		int var0 <- rnd_choice([0.25,0.35,0.4,0]);
		target <-  (goal) at var0;
		target_flag <- false;
		}
		
	}
	
	reflex move {//when: location != target{
	//write target.location;
	//write location;
	//write self distance_to target;
	
			//write target_flag;
		//Neighs contains all the neighbours cells that are reachable by the agent plus the cell where it's located
		list<cell> neighs <- (cell(location) neighbors_at speed) + cell(location); 
		
		//We restrain the movements of the agents only at the grid of cells that are not obstacle using the on facet of the goto operator and we return the path
		//followed by the agent
		//the recompute_path is used to precise that we do not need to recompute the shortest path at each movement (gain of computation time): the obtsacles on the grid never change.
		path followed_path <- self goto (on:(cell), target:target, speed:speed, return_path:true, recompute_path:true);
		
		list<geometry> segments <- followed_path.segments;
		//write segments;
		loop line over: segments
		{
			point l <- line;
			trajectories << l;
			float dist <- line.perimeter;
			//float dist <- line.perimeter;
			//road ag <- road(path_followed agent_from_geometry line);
		}
		//As a side note, it is also possible to use the path_between operator and follow action with a grid
		//Add a my_path attribute of type path to the people species
		//if my_path = nil {my_path <- path_between((cell where not each.is_obstacle), location, target);}
		//path followed_path <- self follow (path: my_path,  return_path:true);
		//write followed_path.segments;
		
		/*if (followed_path != nil) and not empty(followed_path.segments) {
			geometry path_geom <- geometry(followed_path.segments);
			
			//The cells intersecting the path followed by the agent are colored in magenta
			ask (neighs where (each.shape intersects path_geom)) { color <- #magenta;}
		}*/
		if int(self distance_to target) <= 2 {
			target_flag <- true;			
			}
			
		/*write (self.location distance_to (goal at 0));
		write (self.location distance_to (goal at 1));
		write (self.location distance_to (goal at 2));*/	
	}
}

experiment goto_grid type: gui {
	output {
		display objects_display {
			grid cell lines: #black;
			species goal aspect: default ;
			species people aspect: default ;
		}
		display plot{
			chart "Simple Chart" type: histogram{
				data "A" value: a ;//style: stack;
				data "B" value: b ;//style: stack;
				data "C" value: c ;//style: stack;
				data "D" value: d ;//style: stack;
			}
		}
		/* display Ants_2 refresh: every(2) { 
			grid cell;
			/*graphics 'displayText' {
				draw string ( food_remaining ) size: 24.0 at: { 20 , 20 } color: rgb ( 'white' );
			}
			event mouse_down action:press;
			event mouse_up action:click2;*/
		//}  
	}
}
